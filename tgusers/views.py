from rest_framework import viewsets
from tgusers.serializers import TgUserSerializer
from tgusers.models import TgUser
from tgusers.serializers import TgUserSerializer
from drf_spectacular.utils import *


@extend_schema_view(
    list=extend_schema(
        summary="Получить список пользователей",
        description=(
            "Возвращает список всех пользователей, зарегистрированных в системе. "
            "Этот метод поддерживает пагинацию и фильтрацию, если это предусмотрено в запросе. "
            "Используйте этот метод для получения информации о всех пользователях."
        )
    ),
    create=extend_schema(
        summary="Создать нового пользователя",
        description=(
            "Создает нового пользователя с переданными данными. Необходимо указать всю требуемую информацию "
            "для создания пользователя, включая Telegram-логин и другие атрибуты. "
            "В ответе возвращаются данные созданного пользователя."
        )
    ),
    retrieve=extend_schema(
        summary="Получить информацию о пользователе",
        description=(
            "Возвращает подробную информацию о пользователе по его уникальному идентификатору (ID). "
            "Используйте этот метод для получения данных о конкретном пользователе, таких как его Telegram-логин, "
            "имя, и другие атрибуты."
        )
    ),
    update=extend_schema(
        summary="Полное обновление существующего пользователя",
        description=(
            "Полностью обновляет данные существующего пользователя по его ID. Все текущие данные пользователя "
            "будут заменены новыми значениями, указанными в запросе. "
            "Необходимо передать все обязательные данные для пользователя."
        )
    ),
    partial_update=extend_schema(
        summary="Частичное обновление информации о пользователе",
        description=(
            "Частично обновляет данные пользователя по его ID. Этот метод позволяет обновлять только те поля, "
            "которые необходимо изменить, не затрагивая остальные данные пользователя."
        )
    ),
    destroy=extend_schema(
        summary="Удаление пользователя",
        description=(
            "Удаляет пользователя из системы по его уникальному идентификатору (ID). "
            "После удаления пользователь будет полностью удален из базы данных, и его данные станут недоступны."
        )
    ),
)
class TgUserViewSet(viewsets.ModelViewSet):
    serializer_class = TgUserSerializer
    queryset = TgUser.objects.all()